---
- name: Configure Server

  hosts: nodes
  become: yes
  become_method: sudo
  become_user: root
  
  vars:
    repo_server: 172.19.8.192
    time_server: "server 172.19.8.225 iburst"
    dns_servers: |
      nameserver 8.8.8.8
      nameserver 4.2.2.2
      nameserver 172.19.8.103
    kernel_parameters: |
      net.ipv4.tcp_syncookies = 1
      net.ipv4.icmp_echo_ignore_broadcasts = 1
      net.ipv4.conf.all.rp_filter = 1
      net.ipv4.conf.default.rp_filter = 1
      net.ipv4.ip_forward = 0
      net.ipv4.conf.all.send_redirects = 0
      net.ipv4.conf.default.send_redirects = 0
      net.ipv4.conf.all.accept_redirects = 0
      net.ipv4.conf.default.accept_redirects = 0
      net.ipv4.conf.all.secure_redirects = 0
      net.ipv4.conf.default.secure_redirects = 0
      net.ipv6.conf.all.disable_ipv6 = 1
      net.ipv6.conf.default.disable_ipv6 = 1
      net.ipv6.conf.lo.disable_ipv6 = 1
    os_limits: |
      * soft nofile 65000
      * hard nofile 65000
    selinux_config: 'SELINUX=permissive'
    yum_repos: |
        [ol8_baseos_latest]
        name=Oracle Linux 8 BaseOS Latest ($basearch)
        baseurl=http://{{repo_server}}:8080/repos/ol8_baseos_latest
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        
        [ol8_appstream]
        name=Oracle Linux 8 Application Stream ($basearch)
        baseurl=http://{{repo_server}}:8080/repos/ol8_appstream
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        
        [ol8_UEKR7]
        name=Latest Unbreakable Enterprise Kernel Release 7 for Oracle Linux $releasever ($basearch)
        baseurl=http://{{repo_server}}:8080/repos/ol8_UEKR7
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        
        [epel]
        name=Extra Packages for Enterprise Linux 8 - x86_64
        baseurl=http://{{repo_server}}:8080/repos/epel
        enabled=1
        gpgcheck=1
        gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8
    system_users:
      - amarjit
      - pranshu
    application_users:
      - appadm
    password_aging_policy:
      - { regexp: '^PASS_MAX_DAYS', line: 'PASS_MAX_DAYS   45' }
      - { regexp: '^PASS_MIN_DAYS', line: 'PASS_MIN_DAYS   0' }
      - { regexp: '^PASS_WARN_AGE', line: 'PASS_WARN_AGE   7' }
      - { regexp: '^PASS_MIN_LEN', line: 'PASS_MIN_LEN    9' }
    ssh_banner: |
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!WARNING!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      #########################################################################
      ACCESS TO THIS SYSTEM IS STRICTLY RESTRICTED TO AUTHORIZED PERSONS ONLY.
      UNAUTHORIZED ACCESS TO THIS SYSTEM IS NOT ALLOWED AND EVERY ACTIVITY IS
      MONITORED ON THIS SYSTEM.
      #########################################################################
    ssh_hardened_config:
      - { regexp: '^Protocol', line: 'Protocol 2' }
      - { regexp: '^UsePAM', line: 'UsePAM yes' }
      - { regexp: '^LoginGraceTime', line: 'LoginGraceTime 120' }
      - { regexp: '^MaxAuthTries', line: 'MaxAuthTries 3' }
      - { regexp: '^StrictModes', line: 'StrictModes yes' }
      - { regexp: '^ClientAliveInterval', line: 'ClientAliveInterval 0' }
      - { regexp: '^ClientAliveCountMax', line: 'ClientAliveCountMax 3' }
      - { regexp: '^PermitRootLogin', line: 'PermitRootLogin yes' }
      - { regexp: '^IgnoreRhosts', line: 'IgnoreRhosts yes' }
      - { regexp: '^HostbasedAuthentication', line: 'HostbasedAuthentication no' }
      - { regexp: '^X11Forwarding', line: 'X11Forwarding yes' }
      - { regexp: '^PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
      - { regexp: '^AllowTcpForwarding', line: 'AllowTcpForwarding yes' }
      - { regexp: '^Ciphers', line: 'Ciphers aes128-ctr,aes192-ctr,aes256-ctr' }
      - { regexp: '^Banner', line: 'Banner /etc/ssh/banner.txt' }
      - { regexp: '^DenyUsers', line: 'DenyUsers appadm' }

  vars_prompt:
    - name: "redhat_password"
      prompt: "Enter your Red Hat subscription password"
      private: yes

  tasks:
    - name: Add host entry for each host
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address }} {{ inventory_hostname }}"
        state: present
        create: yes  
  
    - name: Register RHEL system with Red Hat Subscription Manager
      redhat_subscription:
        state: present
        username: paulpranshu@gmail.com
        password: "{{ redhat_password }}"  

    - name: Set timezone to Asia/Kolkata
      timezone:
        name: "Asia/Kolkata"
  
    - name: Configure time server
      lineinfile:
        path: /etc/chrony.conf
        line: "{{ time_server }}"
        state: present

    - name: Restart chronyd service to apply changes
      service:
        name: chronyd
        state: restarted
        enabled: yes

    - name: Configure DNS servers
      copy:
        content: "{{ dns_servers }}"
        dest: /etc/resolv.conf

    - name: Set kernel parameters
      copy:
        content: "{{ kernel_parameters }}"
        dest: /etc/sysctl.d/10-np-custom.conf

    - name: Apply kernel parameters
      command: sysctl -p /etc/sysctl.d/10-np-custom.conf

    - name: Set OS limits
      copy:
        content: "{{ os_limits }}"
        dest: /etc/security/limits.d/10-np-custom.conf

    - name: Set SELinux to permissive
      lineinfile:
        path: /etc/selinux/config
        regexp: '^SELINUX='
        line: "{{ selinux_config }}"
      notify: Set SELinux to permissive

    - name: Set SELinux mode to permissive immediately
      command: setenforce 0
      when: ansible_selinux.status == "enabled"

    - name: Create /sysbackup directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /sysbackup
        - /sysbackup/logs
        - /sysbackup/locks

    - name: Set daily health check and SAR cron jobs
      cron:
        name: "{{ item }} health check"
        minute: "*/15"
        job: "/sysbackup/{{ item }} /sysbackup/{{ item }}_config"
      loop:
        - cpu_util
        - mem_util
        - disk_util

    - name: Set daily monitoring script cron job
      cron:
        name: ""
        minute: 0
        hour: 7
        job: "/sysbackup/monitoring-script /sysbackup/monitoring_config"

    - name: Set 4-hourly SAR monitoring cron job
      cron:
        name: ""
        minute: 0
        hour: "*/4"
        job: "/sysbackup/monitoring-sar /sysbackup/sar_config"

    - name: Backup oracle-linux-ol8.repo to oracle-linux-ol8.repo.bak
      copy:
        src: /etc/yum.repos.d/oracle-linux-ol8.repo
        dest: /etc/yum.repos.d/oracle-linux-ol8.repo.bak
        remote_src: yes
        force: no

    - name: Remove the original oracle-linux-ol8.repo file
      file:
        path: /etc/yum.repos.d/oracle-linux-ol8.repo
        state: absent

    - name: Backup uek-ol8.repo to uek-ol8.repo.bak
      copy:
        src: /etc/yum.repos.d/uek-ol8.repo
        dest: /etc/yum.repos.d/uek-ol8.repo.bak
        remote_src: yes
        force: no

    - name: Remove the original uek-ol8.repo file
      file:
        path: /etc/yum.repos.d/uek-ol8.repo
        state: absent

    - name: Download the RPM GPG key
      get_url:
        url: http://172.19.8.192:8080/rpm-gpg/RPM-GPG-KEY-EPEL-8
        dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-8
        mode: '0644'

    - name: Configure Yum Client
      copy:
        content: "{{ yum_repos }}"
        dest: /etc/yum.repos.d/oracle-linux.repo

    - name: Clean DNF metadata
      command: dnf clean metadata

    - name: Add system users
      user:
        name: "{{ item }}"
        password: "{{ 'Redhat@667' | password_hash('sha512') }}"
        state: present
      loop: "{{ system_users }}"

    - name: Add application users
      user:
        name: "{{ item }}"
        password: "{{ 'Reset@123' | password_hash('sha512') }}"
        state: present
      loop: "{{ application_users }}"

    - name: Enable session timeout
      copy:
        content: 'readonly TMOUT=3600; export TMOUT'
        dest: /etc/profile.d/tmout.sh

    - name: Grant sudo privilege to appadm user
      copy:
        content: "appadm ALL=(ALL) PASSWD: ALL"
        dest: /etc/sudoers.d/appadm
        mode: '0400'

    - name: Set password ageing policy
      lineinfile:
        path: /etc/login.defs
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop: "{{ password_aging_policy }}"

    - name: Gather list of users
      shell: |
        getent passwd | grep bash$ | grep -vE "appadm|root|amarjit|pranshu" | cut -d : -f 1
      register: user_list

    - name: Update password ageing policy for existing users
      command: chage --maxdays 45 --mindays 7 --warndays 7 {{ item }}
      loop: "{{ user_list.stdout_lines }}"
      register: chage_result
      ignore_errors: yes
      failed_when: chage_result.rc != 0 and "'does not exist' not in chage_result.stderr"

    - name: Set password history policy
      copy:
        content: |
          enforce_for_root
          use_authtok
          remember = 10
          retry = 3
        dest: /etc/security/pwhistory.conf

    - name: Set password strength policy
      copy:
        content: |
          enforce_for_root
          minlen = 9
          dcredit = -1
          ucredit = -1
          lcredit = -1
          ocredit = -1
          dictcheck = 1
          usercheck = 1
          retry = 3
        dest: /etc/security/pwquality.conf.d/pwquality.conf

    - name: Select PAM profile
      command: authselect select sssd with-pwhistory without-nullok --force

    - name: Create su group
      group:
        name: sugroup
        state: present

    - name: Add users to sugroup
      user:
        name: "{{ item }}"
        groups: sugroup
        append: yes
      loop:
        - appadm
        - amarjit
        - pranshu

    - name: Update /etc/pam.d/su to use sugroup
      lineinfile:
        path: /etc/pam.d/su
        regexp: '^auth\s+requisite\s+pam_wheel.so'
        line: 'auth requisite pam_wheel.so use_uid group=sugroup'

    - name: Disable Ctrl-Alt-Del
      systemd:
        name: ctrl-alt-del.target
        enabled: no
        masked: yes
        state: stopped

    - name: Update systemd configuration
      lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^CtrlAltDelBurstAction='
        line: 'CtrlAltDelBurstAction=none'

    - name: Add SSH banner
      copy:
        content: "{{ ssh_banner }}"
        dest: /etc/ssh/banner.txt

    - name: Harden SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop: "{{ ssh_hardened_config }}"

    - name: Reload SSH configuration
      systemd:
        name: sshd
        state: reloaded

    - name: Create /var/log/bash_history directory
      ansible.builtin.file:
        path: /var/log/bash_history
        state: directory
        owner: root
        group: root
        mode: '0777'

    - name: Monitor bash history
      copy:
        content: |
          readonly HISTSIZE=2000
          readonly HISTFILESIZE=3000
          readonly HISTTIMEFORMAT="%Y-%m-%d %T "
          readonly PROMPT_COMMAND='history -a'
          readonly HISTFILE="/var/log/bash_history/$(logname)_as_$(whoami)_history"
          export HISTFILE HISTSIZE HISTFILESIZE PROMPT_COMMAND
        dest: /etc/profile.d/history.sh

    - name: Ensure sysstat and mailx are installed
      dnf:
        name:
          - sysstat
          - mailx
          - bash-completion
        state: present
        
    - name: Unmount ISO from device /dev/sr0
      mount:
        src: "/dev/sr0"
        state: unmounted
        
    - name: Find all files in /var/log/bash_history
      find:
        paths: /var/log/bash_history
        file_type: file
      register: bash_history_files

    - name: Delete all files in /var/log/bash_history
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ bash_history_files.files }}"
      when: bash_history_files.matched > 0    

    - name: Remove specific .bash_history files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/root/.bash_history"
        - "/home/pranshu/.bash_history"    

  handlers:
    - name: Set SELinux to permissive
      command: setenforce 0        