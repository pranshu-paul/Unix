Commands -- ssh, sshd, sftp, scp, ssh-copy-id, ssh-keygen, w ,semanage
Packages openssh, openssh-server
Configuration files.
/etc/ssh/sshd_config, /etc/ssh/sshrc, ~/.ssh/rc, ~/.hushlogin, /etc/motd, ~/.authorized_keys

# TO CREATE AUTHORIZED_KEYS FILE.
cd ~ ; mkdir .ssh ; chmod 700 .ssh ; cd .ssh ; touch authorized_keys ; chmod 600 authorized_keys ; cd ~

# TO CHECK LOGS FOR SSHD.
journalctl -f -t sshd

# TO CHECK WHICH IP ARE CONNECTED TO SERVER.
ss -nHtup | awk '{print $6}' | cut -d : -f 1 | sort | uniq -c | sort -nr | nl
ss -nptu | awk '{print $5 "   :   "  $6}'

# TO CHECK WHICH IPs ARE HITTING SERVER.
awk '{print $12}' /var/log/audit/audit.log | grep addr= | sort | uniq -c | sort -nr | sed "1 d" | nl

# TROUBLESHOOTING.
When changing port first enable port on firewall then SElinux.
semanage port -a -t ssh_port_t -p tcp PORTNUMBER
firewall-cmd --zone=public --add-service=ssh --permanent
After changing port in sshd_config.
When changing configuration in sshd_config.
Use "sshd -t" to check whether the configuration is ok or not.
Restart sshd.service "systemctl restart sshd.service"
Use "w" command to check who is logged into the system.
To force log out a user use "pkill -u USER_NAME"
Check SElinux context for each ssh config file.
Check SElinux context of ~/.ssh directory if pub-key authentication is not working.
Use "restorecon -R -v ~/.ssh" to restore SElinux context.
Use "aureport" command if some one is brute forcing.


####################### Sample /etc/ssh/sshd_config hardening ################
Port 2222
Protocol 2
X11Forwarding no
LogLevel INFO
IgnoreRhosts yes
MaxAuthTries 4
HostbasedAuthentication no
PermitRootLogin no
PermitUserEnvironment no
PermitEmptyPasswords no
Ciphers aes128-ctr,aes192-ctr,aes256-ctr
ClientAliveInterval 600
ClientAliveCountMax 0
Banner /etc/issue.net
Banner /etc/motd
AllowGroups root,wheel

# Never set PermitTTY no.

# To allow users from specific set of IPs.
# first wildcard means all users from that IP_ADDRESS.
AllowUsers *@IP_ADDRESS

# from a network.
AllowUsers *@NETWORK_ID/CIDR

# Wildcards can also be used.
AllowUsers *@IP_ADDRESS* 

# Restrict users from few IPs.
AllowUsers *@IP_ADDRESS *@IP_ADDRESS *@IP_ADDRESS

# Restrict to a specific users from a IP.
AllowUsers USER_NAME@IP_ADDRESS
##############################################################################


##########################################################################################################
~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
# This file contains public keys of remote systems.
# This file must be with the permissions of 600.

ssh-rsa AAAA... # This is the line where key starts below options can be prepend to this line for keys in authorized_keys file.

# This option executes command and logs out of the system.
# Can not use this option multiple times.
command="COMMAND;COMMAND" ssh-rsa AAAA... <-- This is for example only.

# Restricts agent forwarding.
no-agent-forwarding

# Restricts port forwarding.
no-port-forwarding

# Restricts excution of hosts rc file ~/.ssh/rc.
no-user-rc

# Restricts X11-forwarding.
no-X11-forwarding

# Allows port-forwarding is disabled in sshd_config.
port-forwarding

# Allows pty allocation if disabled.
pty

# Allow port-forwarding on specific ip and port.
permitopen="host:port"

# This option enables all restriction at once.
restrict
############################################################################################################


#################################################################################################
/etc/ssh/sshrc
# This is a system wide configuration file, which is not present by default.
# This file's all permissions must be on the root user and read by all the users on system.
# This file execute commands or script in it when someone logs in through ssh.

# Default permission set to 744.
chmod 744 /etc/ssh/sshrc


####################################################################################################
AUTOMATION IN SSH WITH PASSWORDLESS SETUP
*****************************************

# USING NATIVE SSH TOOLS FOR PASSWORDLESS SETUP. #
ssh-keygen -b 4096 -t rsa
ssh-copy-id -p 2169 paul@10.0.0.171


# USING CURL #
cat > .netrc << EOF 
machine 10.0.0.171 login paul password Pa55wo&rd@lin#ux
EOF
  
curl -T "/home/paul/test.zip" sftp://paul@10.0.0.171:2169/home/paul/ --netrc-file .netrc

# Uses default .netrc file in users home directory.
curl -T "/home/paul/test.zip" sftp://paul@10.0.0.171:2169/home/paul/ -n



# USING SSHPASS UTILITY. #
sshpass -p 'Pa55wo&rd@lin#ux' ssh paul@10.0.0.171 -p 2169
sshpass -p 'Pa55wo&rd@lin#ux' scp -P 2169 test.zip paul@10.0.0.171:/home/paul/
sshpass -p 'Pa55wo&rd@lin#ux' sftp -P 2169 paul@10.0.0.171:/home/paul/


export SSHPASS='Pa55wo&rd@lin#ux'
sshpass -e scp -P 2169 /home/paul/test paul@10.0.0.171:/home/paul

export SSHPASS='Pa55wo&rd@lin#ux'
sshpass -e ssh paul@10.0.0.171 -p 2169





#!/bin/bash

usage () {
echo "Usage: $0 <source> <user> <hostname> <port> <destination>" >&2
echo 'Sends file to remote host without password.' >&2
exit 1
}

if [[ $# -lt 5 ]]; then
usage
fi

if [[ ! -f ~/.netrc ]]; then
echo "File .netrc not exists in the user $USER home folder." >&2
exit
fi

export FULL_FILE_PATH="${1}"
export DEST_PATH="${5}"
export REMOTE_USER="${2}"
export REMOTE_PORT="${4}"
export REMOTE_HOSTNAME="${3}"

if [[ -d $ "${FULL_FILE_PATH}" ]]; then
echo "Directory provided."
echo "Please make an archive of the directory using zip or tar."
exit 2
fi

curl -T "${FULL_FILE_PATH}" sftp://"${REMOTE_USER}"@"${REMOTE_HOSTNAME}":"${REMOTE_PORT}""${DEST_PATH}" -n


##########################################################################################################

#!/bin/bash

usage() {
  printf "Usage: %s <source_file1> [<source_file2> ...] <user> <hostname> <port> <destination>\n" "$0" >&2
  printf "Sends file(s) to remote host without password.\n" >&2
  exit 1
}

if [[ $# -lt 5 ]]; then
  usage
fi

if [[ ! -e ~/.netrc ]]; then
  echo "File .netrc not found in the user $USER home folder." >&2
  exit 2
fi

export REMOTE_USER="$3"
export REMOTE_PORT="$4"
export REMOTE_HOSTNAME="$2"
export DEST_PATH="$6"

shift 4 # Shift the positional parameters to exclude the remote host information

for file in "$@"; do
  if [[ ! -e "$file" ]]; then
    echo "File $file not found." >&2
    exit 2
  fi

#  if [[ -d "$file" ]]; then
#    echo "Directory provided."
#    echo "Please make an archive of the directory using zip or tar."
#    exit 2
#  fi

  printf "Exporting file %s to %s:%s...\n" "$file" "$REMOTE_USER@$REMOTE_HOSTNAME" "$DEST_PATH"
  curl -T "$file" sftp://"${REMOTE_USER}"@"${REMOTE_HOSTNAME}":"${REMOTE_PORT}""${DEST_PATH}" -n 2> /dev/null

  if [[ $? -ne 0 ]]; then
          usage
  else
  printf "Export of %s completed.\n" "$file"
  fi
done



